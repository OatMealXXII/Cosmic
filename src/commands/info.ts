import {
  SlashCommandBuilder,
  ChatInputCommandInteraction,
  EmbedBuilder
} from 'discord.js';
import { Shoukaku } from 'shoukaku';

function isValidTrack(track: any): track is {
  encoded: string;
  info: {
    title: string;
    uri: string;
    author: string;
    length: number;
    identifier: string;
    isStream: boolean;
    sourceName: string;
  };
} {
  return (
    track &&
    typeof track.encoded === 'string' &&
    track.info &&
    typeof track.info.title === 'string'
  );
}

export const data = new SlashCommandBuilder()
  .setName('info')
  .setDescription('‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà');

export async function execute(interaction: ChatInputCommandInteraction, shoukaku: Shoukaku) {
  try {
    const player = shoukaku.players.get(interaction.guildId!);
    if (!player) {
      return interaction.reply({
        content: '‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ',
        ephemeral: true
      });
    }

    const track = (player as any).currentTrack;
    if (!isValidTrack(track)) {
      return interaction.reply({
        content: '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡πÄ‡∏û‡∏•‡∏á',
        ephemeral: true
      });
    }

    const info = track.info;
    const position = player.position ?? 0;
    const isLooping = (player as any).loop ?? false;
    const volume = player.volume;

    const progress = `${formatTime(position)} / ${formatTime(info.length)}`;
    const embed = new EmbedBuilder()
      .setTitle('üé∂ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô')
      .addFields(
        { name: 'üéµ ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏•‡∏á', value: `[${info.title}](${info.uri})` },
        { name: 'üé§ ‡∏®‡∏¥‡∏•‡∏õ‡∏¥‡∏ô', value: info.author, inline: true },
        { name: 'üïí ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß', value: progress, inline: true },
        { name: 'üîÅ Loop', value: isLooping ? '‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà' : '‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà', inline: true },
        { name: 'üîä Volume', value: `${volume}%`, inline: true },
        { name: 'üì• ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤', value: info.sourceName || '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö', inline: true }
      )
      .setColor('#00ff99')
      .setTimestamp()
      .setFooter({ text: 'Cosmic - OatMealXXII' });

    return interaction.reply({ embeds: [embed] });

  } catch (error) {
    console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /info:', error);
    return interaction.reply({
      content: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏•‡∏á',
      ephemeral: true
    });
  }
}

function formatTime(ms: number): string {
  const totalSeconds = Math.floor(ms / 1000);
  const minutes = Math.floor(totalSeconds / 60);
  const seconds = totalSeconds % 60;
  return `${minutes}:${seconds.toString().padStart(2, '0')}`;
}