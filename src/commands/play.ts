import { Shoukaku } from "shoukaku";
import { ChatInputCommandInteraction, SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } from 'discord.js';
import config from "../config/config.ts";
import { queueMap } from './queue.ts';
import { playerChannelMap } from "../maps/mapsController.ts";
import { loopModeMap } from "../maps/mapsController.ts";

type Track = {
    encoded: string;
    info: {
        title: string;
        uri: string;
        author: string;
        length: number;
    };
};

export const data = new SlashCommandBuilder()
    .setName('play')
    .setDescription('‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏™‡πà URL')
    .addStringOption(option =>
        option.setName('query').setDescription('‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏•‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏™‡πà URL').setRequired(true)
    );

function isValidTrack(track: any): track is {
    encoded: string;
    info: { title: string; uri: string; author: string; length: number };
} {
    return typeof track?.encoded === 'string' &&
        typeof track?.info?.title === 'string' &&
        typeof track?.info?.uri === 'string' &&
        typeof track?.info?.author === 'string' &&
        typeof track?.info?.length === 'number';
}

export async function execute(interaction: ChatInputCommandInteraction, shoukaku: Shoukaku) {
    const query = interaction.options.getString('query', true);
    const member = interaction.guild?.members.cache.get(interaction.user.id);
    const vc = member?.voice.channel;
    const guildId = interaction.guildId;

    if (!vc) {
        return await interaction.reply({ content: '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Å‡πà‡∏≠‡∏ô!', ephemeral: true });
    }

    const node = shoukaku.options.nodeResolver(shoukaku.nodes);
    if (!node) return interaction.editReply('‚ùå Lavalink ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');

    let player = shoukaku.players.get(interaction.guildId!);

    if (!player) {
        player = await shoukaku.joinVoiceChannel({
            guildId: interaction.guildId!,
            channelId: vc.id,
            shardId: 0,
            deaf: true
        });
    }

    const result = await player.node.rest.resolve(query);
    playerChannelMap.set(interaction.guildId!, vc.id);

    if (!result || ['LOAD_FAILED', 'NO_MATCHES'].includes(result.loadType)) {
        return await interaction.reply({
            content: '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤',
            ephemeral: true
        });
    }

    const track = Array.isArray(result.data) ? result.data[0] : result.data;

    if (!isValidTrack(track)) {
        return await interaction.reply({
            content: '‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏•‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
            ephemeral: true
        });
    }

    if (!track || !track.encoded || !track.info || !track.info.title) {
        return await interaction.reply({
            content: '‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏•‡∏á‡πÑ‡∏î‡πâ',
            ephemeral: true
        });
    }

    const embed = new EmbedBuilder()
        .setColor('#0099ff')
        .setTitle('‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô')
        .setDescription(`‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô: **${track.info.title}**`)
        .addFields(
            { name: '‡∏®‡∏¥‡∏•‡∏õ‡∏¥‡∏ô', value: track.info.author, inline: true },
            { name: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß', value: `${(track.info.length / 1000 / 60).toFixed(2)} ‡∏ô‡∏≤‡∏ó‡∏µ`, inline: true }
        )
        .setURL(track.info.uri)
        .setTimestamp()
        .setFooter({ text: 'Cosmic - OatMealXXII' });

        
    const queueEmbed = new EmbedBuilder()
        .setColor('#0099ff')
        .setTitle('‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏•‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Ñ‡∏¥‡∏ß')
        .setDescription(`üé∂ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏•‡∏á **${track.info.title}** ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Ñ‡∏¥‡∏ß‡πÅ‡∏•‡πâ‡∏ß`)
        .addFields(
            { name: '‡∏®‡∏¥‡∏•‡∏õ‡∏¥‡∏ô', value: track.info.author, inline: true },
            { name: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß', value: `${(track.info.length / 1000 / 60).toFixed(2)} ‡∏ô‡∏≤‡∏ó‡∏µ`, inline: true }
        )
        .setTimestamp()
        .setFooter({ text: 'Cosmic - OatMealXXII' });

    if (!queueMap.has(guildId!)) queueMap.set(guildId!, []);

    const queue = queueMap.get(guildId!)!;
    player.volume = config.defaultvolume.volume;

    /* const row = new ActionRowBuilder<ButtonBuilder>().addComponents(
        new ButtonBuilder()
            .setCustomId('toggle-playback')
            .setLabel('‚èØÔ∏è')
            .setStyle(ButtonStyle.Primary),
        new ButtonBuilder()
            .setCustomId('skip-track')
            .setLabel('‚è≠Ô∏è')
            .setStyle(ButtonStyle.Secondary),
        new ButtonBuilder()
            .setCustomId('stop-track')
            .setLabel('‚èπÔ∏è')
            .setStyle(ButtonStyle.Danger),
    ); */

    if (player.track) {
        queue.push(track);
        return await interaction.reply({
            content: `üé∂ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏•‡∏á **${track.info.title}** ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Ñ‡∏¥‡∏ß‡πÅ‡∏•‡πâ‡∏ß`,
            embeds: [queueEmbed],
            ephemeral: true
        });
    } else {
        await player.playTrack({ track: { encoded: track.encoded } });
        (player as any).currentTrack = track;
        interaction.reply({
            content: `üé∂ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô: **${track.info.title}**`,
            embeds: [embed],
            // components: [row]
        });
    }

    player.on('end', async () => {
        const queue = queueMap.get(guildId!) ?? [];
        const loopMode = loopModeMap.get(guildId!) || 'off';
        const currentTrack = (player as any).currentTrack;

        if (loopMode === 'one' && currentTrack) {
            await player.playTrack({ track: { encoded: currentTrack.encoded } });
            return;
        }

        if (loopMode === 'all' && currentTrack) {
            queue.push(currentTrack);
        }

        const nextTrack = queue.shift();
        if (nextTrack) {
            await player.playTrack({ track: { encoded: nextTrack.encoded } });
        }
        else {
            setTimeout(async () => {
                await player.stopTrack();
                await shoukaku.leaveVoiceChannel(player.guildId);
            }, 30000);
        }
    });
};