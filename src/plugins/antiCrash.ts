import { Client } from 'discord.js';
import * as fs from 'fs';
import * as path from 'path';
import process from 'node:process';

// ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ AntiCrash
interface AntiCrashConfig {
    enabled: boolean;         // ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô antiCrash ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    logToFile: boolean;       // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    logToConsole: boolean;    // ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô console ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    logToChannel: boolean;    // ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ä‡πà‡∏≠‡∏á Discord ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    logChannelId?: string;    // ID ‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    exitOnUncaught: boolean;  // ‡∏õ‡∏¥‡∏î‡∏ö‡∏≠‡∏ó‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î uncaught exception ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    logDirectory: string;     // ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå log
}

// ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
const defaultConfig: AntiCrashConfig = {
    enabled: true,
    logToFile: true,
    logToConsole: true,
    logToChannel: false,
    exitOnUncaught: false,
    logDirectory: 'logs'
};

/**
 * ‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏°‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó
 */
export class AntiCrash {
    private client: Client;
    private config: AntiCrashConfig;
    private logFileName: string;

    /**
     * ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡∏Ç‡∏≠‡∏á AntiCrash
     * @param client Client Discord.js
     * @param config ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AntiCrash (optional)
     */
    constructor(client: Client, config: Partial<AntiCrashConfig> = {}) {
        this.client = client;
        this.config = { ...defaultConfig, ...config };
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå log ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        const now = new Date();
        this.logFileName = `crash_${now.getFullYear()}-${(now.getMonth() + 1).toString().padStart(2, '0')}-${now.getDate().toString().padStart(2, '0')}_${now.getHours().toString().padStart(2, '0')}-${now.getMinutes().toString().padStart(2, '0')}.log`;
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö log ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
        if (this.config.logToFile) {
            if (!fs.existsSync(this.config.logDirectory)) {
                fs.mkdirSync(this.config.logDirectory, { recursive: true });
            }
        }
    }

    /**
     * ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô AntiCrash
     */
    public start(): void {
        if (!this.config.enabled) return;

        this.logInfo('AntiCrash system initialized');

        // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ uncaught exceptions
        process.on('uncaughtException', (error: Error) => {
            this.handleError('Uncaught Exception', error);

            if (this.config.exitOnUncaught) {
                this.logError('Bot is shutting down due to an uncaught exception');
                process.exit(1);
            }
        });

        // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ unhandled rejection
        process.on('unhandledRejection', (reason: any) => {
            const error = reason instanceof Error ? reason : new Error(String(reason));
            this.handleError('Unhandled Promise Rejection', error);
        });

        // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ warning
        process.on('warning', (warning: Error) => {
            this.handleWarning('Process Warning', warning);
        });

        // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
        process.on('SIGINT', () => {
            this.logInfo('Bot received SIGINT signal, shutting down gracefully');
            this.cleanup();
            process.exit(0);
        });

        process.on('SIGTERM', () => {
            this.logInfo('Bot received SIGTERM signal, shutting down gracefully');
            this.cleanup();
            process.exit(0);
        });

        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Discord client
        this.client.on('error', (error: Error) => {
            this.handleError('Discord Client Error', error);
        });

        this.client.on('shardError', (error: Error) => {
            this.handleError('Discord Shard Error', error);
        });
    }

    /**
     * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
     * @param type ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
     * @param error ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
     */
    private handleError(type: string, error: Error): void {
        const timestamp = new Date().toISOString();
        const message = `[${timestamp}] [ERROR] [${type}] ${error.name}: ${error.message}`;
        const stack = error.stack ? `\nStack Trace:\n${error.stack}` : '';
        
        // ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô console
        if (this.config.logToConsole) {
            console.error('\x1b[31m%s\x1b[0m', message); // ‡∏™‡∏µ‡πÅ‡∏î‡∏á
            if (stack) console.error('\x1b[31m%s\x1b[0m', stack);
        }
        
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
        if (this.config.logToFile) {
            const logPath = path.join(this.config.logDirectory, this.logFileName);
            fs.appendFileSync(logPath, `${message}${stack}\n\n`);
        }
        
        // ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ä‡πà‡∏≠‡∏á Discord
        if (this.config.logToChannel && this.config.logChannelId) {
            this.sendErrorToChannel(type, error);
        }
    }

    /**
     * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ warning
     * @param type ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á warning
     * @param warning warning ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
     */
    private handleWarning(type: string, warning: Error): void {
        const timestamp = new Date().toISOString();
        const message = `[${timestamp}] [WARNING] [${type}] ${warning.name}: ${warning.message}`;
        
        // ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô console
        if (this.config.logToConsole) {
            console.warn('\x1b[33m%s\x1b[0m', message); // ‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á
        }
        
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
        if (this.config.logToFile) {
            const logPath = path.join(this.config.logDirectory, this.logFileName);
            fs.appendFileSync(logPath, `${message}\n\n`);
        }
    }

    /**
     * ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° info
     * @param message ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
     */
    private logInfo(message: string): void {
        const timestamp = new Date().toISOString();
        const formattedMessage = `[${timestamp}] [INFO] ${message}`;
        
        // ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô console
        if (this.config.logToConsole) {
            console.log('\x1b[36m%s\x1b[0m', formattedMessage); // ‡∏™‡∏µ‡∏ü‡πâ‡∏≤
        }
        
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
        if (this.config.logToFile) {
            const logPath = path.join(this.config.logDirectory, this.logFileName);
            fs.appendFileSync(logPath, `${formattedMessage}\n\n`);
        }
    }

    /**
     * ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error
     * @param message ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
     */
    private logError(message: string): void {
        const timestamp = new Date().toISOString();
        const formattedMessage = `[${timestamp}] [ERROR] ${message}`;
        
        // ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô console
        if (this.config.logToConsole) {
            console.error('\x1b[31m%s\x1b[0m', formattedMessage); // ‡∏™‡∏µ‡πÅ‡∏î‡∏á
        }
        
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
        if (this.config.logToFile) {
            const logPath = path.join(this.config.logDirectory, this.logFileName);
            fs.appendFileSync(logPath, `${formattedMessage}\n\n`);
        }
    }

    /**
     * ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ä‡πà‡∏≠‡∏á Discord
     * @param type ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
     * @param error ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
     */
    private async sendErrorToChannel(type: string, error: Error): Promise<void> {
        if (!this.config.logChannelId) return;
        
        try {
            const channel = await this.client.channels.fetch(this.config.logChannelId);
            if (
                !channel ||
                !channel.isTextBased() ||
                typeof (channel as any).send !== 'function'
            ) return;
            
            // ‡∏ï‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏≤‡∏Å‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
            let stackTrace = error.stack || 'No stack trace available';
            if (stackTrace.length > 1500) {
                stackTrace = stackTrace.substring(0, 1500) + '... (truncated)';
            }
            
            const errorMessage = `**üî¥ ${type} Detected**\n\`\`\`\n${error.name}: ${error.message}\n\n${stackTrace}\n\`\`\``;
            await (channel as any).send(errorMessage);
        } catch (channelError) {
            console.error('Failed to send error to Discord channel:', channelError);
        }
    }

    /**
     * ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏¥‡∏î‡∏ö‡∏≠‡∏ó
     */
    private cleanup(): void {
        this.logInfo('Performing cleanup before shutdown');
        
        // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Ç‡∏≠‡∏á Discord client
        if (this.client.isReady()) {
            this.client.destroy();
        }
        
        // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        // ‡πÄ‡∏ä‡πà‡∏ô ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•, ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô, ‡∏Ø‡∏•‡∏Ø
    }
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏£‡∏π‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô AntiCrash
 * @param client Discord client
 * @param antiCrashconfig ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ (optional)
 * @returns instance ‡∏Ç‡∏≠‡∏á AntiCrash
 */
export function setupAntiCrash(client: Client, config: Partial<AntiCrashConfig> = {}): AntiCrash {
    const antiCrash = new AntiCrash(client, config);
    antiCrash.start();
    return antiCrash;
}

// Created By Claude 3.7 OatMealXXII